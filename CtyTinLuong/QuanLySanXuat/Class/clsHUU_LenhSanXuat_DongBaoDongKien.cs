///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'HUU_LenhSanXuat_DongBaoDongKien'
// Generated by LLBLGen v1.3.5996.26197 Final on: Saturday, April 10, 2021, 9:22:15 AM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace CtyTinLuong
{
	/// <summary>
	/// Purpose: Data Access class for the table 'HUU_LenhSanXuat_DongBaoDongKien'.
	/// </summary>
	public class clsHUU_LenhSanXuat_DongBaoDongKien : clsDBInteractionBase
	{
		#region Class Member Declarations
			private SqlBoolean		m_bTrangThai_NhapKho_ThanhPham, m_bGuiDuLieu, m_bTrangThai_XuatKho_VatTuChinh, m_bTrangThai_XuatKho_VatTuPhu, m_bNgungTheoDoi, m_bCheck_DongBao, m_bTonTai;
			private SqlDateTime		m_daNgayThangSanXuat;
			private SqlDouble		m_fThanhTien_ThanhPham, m_fPhePham, m_fDonGia_ThanhPham, m_fSoLuong_ThanhPham;
			private SqlInt32		m_iID_CaTruong, m_iID_CongNhan, m_iID_LenhSanXuat, m_iID_DinhMuc_Luong_SanLuong, m_iID_VTHH_ThanhPham, m_iID_NguoiLap;
			private SqlString		m_sGhiChu, m_sMaLenhSanXuat, m_sCaSanXuat;
		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public clsHUU_LenhSanXuat_DongBaoDongKien()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>sMaLenhSanXuat</LI>
		///		 <LI>sCaSanXuat</LI>
		///		 <LI>daNgayThangSanXuat</LI>
		///		 <LI>iID_CongNhan</LI>
		///		 <LI>iID_CaTruong</LI>
		///		 <LI>iID_NguoiLap</LI>
		///		 <LI>iID_DinhMuc_Luong_SanLuong</LI>
		///		 <LI>iID_VTHH_ThanhPham</LI>
		///		 <LI>fSoLuong_ThanhPham</LI>
		///		 <LI>fDonGia_ThanhPham</LI>
		///		 <LI>fThanhTien_ThanhPham</LI>
		///		 <LI>bTrangThai_XuatKho_VatTuChinh. May be SqlBoolean.Null</LI>
		///		 <LI>bTrangThai_XuatKho_VatTuPhu. May be SqlBoolean.Null</LI>
		///		 <LI>bTrangThai_NhapKho_ThanhPham. May be SqlBoolean.Null</LI>
		///		 <LI>fPhePham</LI>
		///		 <LI>sGhiChu</LI>
		///		 <LI>bGuiDuLieu</LI>
		///		 <LI>bTonTai</LI>
		///		 <LI>bNgungTheoDoi</LI>
		///		 <LI>bCheck_DongBao</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>iID_LenhSanXuat</LI>
		///		 <LI>iErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_HUU_LenhSanXuat_DongBaoDongKien_Insert]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sMaLenhSanXuat", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sMaLenhSanXuat));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sCaSanXuat", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sCaSanXuat));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@daNgayThangSanXuat", SqlDbType.SmallDateTime, 3, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daNgayThangSanXuat));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID_CongNhan", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID_CongNhan));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID_CaTruong", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID_CaTruong));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID_NguoiLap", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID_NguoiLap));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID_DinhMuc_Luong_SanLuong", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID_DinhMuc_Luong_SanLuong));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID_VTHH_ThanhPham", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID_VTHH_ThanhPham));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@fSoLuong_ThanhPham", SqlDbType.Float, 8, ParameterDirection.Input, false, 38, 0, "", DataRowVersion.Proposed, m_fSoLuong_ThanhPham));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@fDonGia_ThanhPham", SqlDbType.Float, 8, ParameterDirection.Input, false, 38, 0, "", DataRowVersion.Proposed, m_fDonGia_ThanhPham));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@fThanhTien_ThanhPham", SqlDbType.Float, 8, ParameterDirection.Input, false, 38, 0, "", DataRowVersion.Proposed, m_fThanhTien_ThanhPham));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bTrangThai_XuatKho_VatTuChinh", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bTrangThai_XuatKho_VatTuChinh));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bTrangThai_XuatKho_VatTuPhu", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bTrangThai_XuatKho_VatTuPhu));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bTrangThai_NhapKho_ThanhPham", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bTrangThai_NhapKho_ThanhPham));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@fPhePham", SqlDbType.Float, 8, ParameterDirection.Input, false, 38, 0, "", DataRowVersion.Proposed, m_fPhePham));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sGhiChu", SqlDbType.NVarChar, 450, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sGhiChu));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bGuiDuLieu", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bGuiDuLieu));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bTonTai", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bTonTai));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bNgungTheoDoi", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bNgungTheoDoi));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bCheck_DongBao", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bCheck_DongBao));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID_LenhSanXuat", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iID_LenhSanXuat));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				m_iID_LenhSanXuat = (SqlInt32)scmCmdToExecute.Parameters["@iID_LenhSanXuat"].Value;
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_HUU_LenhSanXuat_DongBaoDongKien_Insert' reported the ErrorCode: " + m_iErrorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("clsHUU_LenhSanXuat_DongBaoDongKien::Insert::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method. This method will Update one existing row in the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>iID_LenhSanXuat</LI>
		///		 <LI>sMaLenhSanXuat</LI>
		///		 <LI>sCaSanXuat</LI>
		///		 <LI>daNgayThangSanXuat</LI>
		///		 <LI>iID_CongNhan</LI>
		///		 <LI>iID_CaTruong</LI>
		///		 <LI>iID_NguoiLap</LI>
		///		 <LI>iID_DinhMuc_Luong_SanLuong</LI>
		///		 <LI>iID_VTHH_ThanhPham</LI>
		///		 <LI>fSoLuong_ThanhPham</LI>
		///		 <LI>fDonGia_ThanhPham</LI>
		///		 <LI>fThanhTien_ThanhPham</LI>
		///		 <LI>bTrangThai_XuatKho_VatTuChinh. May be SqlBoolean.Null</LI>
		///		 <LI>bTrangThai_XuatKho_VatTuPhu. May be SqlBoolean.Null</LI>
		///		 <LI>bTrangThai_NhapKho_ThanhPham. May be SqlBoolean.Null</LI>
		///		 <LI>fPhePham</LI>
		///		 <LI>sGhiChu</LI>
		///		 <LI>bGuiDuLieu</LI>
		///		 <LI>bTonTai</LI>
		///		 <LI>bNgungTheoDoi</LI>
		///		 <LI>bCheck_DongBao</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>iErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Update()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_HUU_LenhSanXuat_DongBaoDongKien_Update]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID_LenhSanXuat", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID_LenhSanXuat));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sMaLenhSanXuat", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sMaLenhSanXuat));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sCaSanXuat", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sCaSanXuat));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@daNgayThangSanXuat", SqlDbType.SmallDateTime, 3, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daNgayThangSanXuat));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID_CongNhan", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID_CongNhan));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID_CaTruong", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID_CaTruong));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID_NguoiLap", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID_NguoiLap));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID_DinhMuc_Luong_SanLuong", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID_DinhMuc_Luong_SanLuong));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID_VTHH_ThanhPham", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID_VTHH_ThanhPham));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@fSoLuong_ThanhPham", SqlDbType.Float, 8, ParameterDirection.Input, false, 38, 0, "", DataRowVersion.Proposed, m_fSoLuong_ThanhPham));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@fDonGia_ThanhPham", SqlDbType.Float, 8, ParameterDirection.Input, false, 38, 0, "", DataRowVersion.Proposed, m_fDonGia_ThanhPham));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@fThanhTien_ThanhPham", SqlDbType.Float, 8, ParameterDirection.Input, false, 38, 0, "", DataRowVersion.Proposed, m_fThanhTien_ThanhPham));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bTrangThai_XuatKho_VatTuChinh", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bTrangThai_XuatKho_VatTuChinh));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bTrangThai_XuatKho_VatTuPhu", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bTrangThai_XuatKho_VatTuPhu));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bTrangThai_NhapKho_ThanhPham", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bTrangThai_NhapKho_ThanhPham));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@fPhePham", SqlDbType.Float, 8, ParameterDirection.Input, false, 38, 0, "", DataRowVersion.Proposed, m_fPhePham));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sGhiChu", SqlDbType.NVarChar, 450, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sGhiChu));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bGuiDuLieu", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bGuiDuLieu));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bTonTai", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bTonTai));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bNgungTheoDoi", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bNgungTheoDoi));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bCheck_DongBao", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bCheck_DongBao));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_HUU_LenhSanXuat_DongBaoDongKien_Update' reported the ErrorCode: " + m_iErrorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("clsHUU_LenhSanXuat_DongBaoDongKien::Update::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>iID_LenhSanXuat</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>iErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Delete()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_HUU_LenhSanXuat_DongBaoDongKien_Delete]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID_LenhSanXuat", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID_LenhSanXuat));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_HUU_LenhSanXuat_DongBaoDongKien_Delete' reported the ErrorCode: " + m_iErrorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("clsHUU_LenhSanXuat_DongBaoDongKien::Delete::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>iID_LenhSanXuat</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>iErrorCode</LI>
		///		 <LI>iID_LenhSanXuat</LI>
		///		 <LI>sMaLenhSanXuat</LI>
		///		 <LI>sCaSanXuat</LI>
		///		 <LI>daNgayThangSanXuat</LI>
		///		 <LI>iID_CongNhan</LI>
		///		 <LI>iID_CaTruong</LI>
		///		 <LI>iID_NguoiLap</LI>
		///		 <LI>iID_DinhMuc_Luong_SanLuong</LI>
		///		 <LI>iID_VTHH_ThanhPham</LI>
		///		 <LI>fSoLuong_ThanhPham</LI>
		///		 <LI>fDonGia_ThanhPham</LI>
		///		 <LI>fThanhTien_ThanhPham</LI>
		///		 <LI>bTrangThai_XuatKho_VatTuChinh</LI>
		///		 <LI>bTrangThai_XuatKho_VatTuPhu</LI>
		///		 <LI>bTrangThai_NhapKho_ThanhPham</LI>
		///		 <LI>fPhePham</LI>
		///		 <LI>sGhiChu</LI>
		///		 <LI>bGuiDuLieu</LI>
		///		 <LI>bTonTai</LI>
		///		 <LI>bNgungTheoDoi</LI>
		///		 <LI>bCheck_DongBao</LI>
		/// </UL>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public override DataTable SelectOne()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_HUU_LenhSanXuat_DongBaoDongKien_SelectOne]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable dtToReturn = new DataTable("HUU_LenhSanXuat_DongBaoDongKien");
			SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID_LenhSanXuat", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID_LenhSanXuat));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				sdaAdapter.Fill(dtToReturn);
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_HUU_LenhSanXuat_DongBaoDongKien_SelectOne' reported the ErrorCode: " + m_iErrorCode);
				}

				if(dtToReturn.Rows.Count > 0)
				{
					m_iID_LenhSanXuat = (Int32)dtToReturn.Rows[0]["ID_LenhSanXuat"];
					m_sMaLenhSanXuat = (string)dtToReturn.Rows[0]["MaLenhSanXuat"];
					m_sCaSanXuat = (string)dtToReturn.Rows[0]["CaSanXuat"];
					m_daNgayThangSanXuat = (DateTime)dtToReturn.Rows[0]["NgayThangSanXuat"];
					m_iID_CongNhan = (Int32)dtToReturn.Rows[0]["ID_CongNhan"];
					m_iID_CaTruong = (Int32)dtToReturn.Rows[0]["ID_CaTruong"];
					m_iID_NguoiLap = (Int32)dtToReturn.Rows[0]["ID_NguoiLap"];
					m_iID_DinhMuc_Luong_SanLuong = (Int32)dtToReturn.Rows[0]["ID_DinhMuc_Luong_SanLuong"];
					m_iID_VTHH_ThanhPham = (Int32)dtToReturn.Rows[0]["ID_VTHH_ThanhPham"];
					m_fSoLuong_ThanhPham = (double)dtToReturn.Rows[0]["SoLuong_ThanhPham"];
					m_fDonGia_ThanhPham = (double)dtToReturn.Rows[0]["DonGia_ThanhPham"];
					m_fThanhTien_ThanhPham = (double)dtToReturn.Rows[0]["ThanhTien_ThanhPham"];
					m_bTrangThai_XuatKho_VatTuChinh = dtToReturn.Rows[0]["TrangThai_XuatKho_VatTuChinh"] == System.DBNull.Value ? SqlBoolean.Null : (bool)dtToReturn.Rows[0]["TrangThai_XuatKho_VatTuChinh"];
					m_bTrangThai_XuatKho_VatTuPhu = dtToReturn.Rows[0]["TrangThai_XuatKho_VatTuPhu"] == System.DBNull.Value ? SqlBoolean.Null : (bool)dtToReturn.Rows[0]["TrangThai_XuatKho_VatTuPhu"];
					m_bTrangThai_NhapKho_ThanhPham = dtToReturn.Rows[0]["TrangThai_NhapKho_ThanhPham"] == System.DBNull.Value ? SqlBoolean.Null : (bool)dtToReturn.Rows[0]["TrangThai_NhapKho_ThanhPham"];
					m_fPhePham = (double)dtToReturn.Rows[0]["PhePham"];
					m_sGhiChu = (string)dtToReturn.Rows[0]["GhiChu"];
					m_bGuiDuLieu = (bool)dtToReturn.Rows[0]["GuiDuLieu"];
					m_bTonTai = (bool)dtToReturn.Rows[0]["TonTai"];
					m_bNgungTheoDoi = (bool)dtToReturn.Rows[0]["NgungTheoDoi"];
					m_bCheck_DongBao = (bool)dtToReturn.Rows[0]["Check_DongBao"];
				}
				return dtToReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("clsHUU_LenhSanXuat_DongBaoDongKien::SelectOne::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
				sdaAdapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>iErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override DataTable SelectAll()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_HUU_LenhSanXuat_DongBaoDongKien_SelectAll]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable dtToReturn = new DataTable("HUU_LenhSanXuat_DongBaoDongKien");
			SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				sdaAdapter.Fill(dtToReturn);
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_HUU_LenhSanXuat_DongBaoDongKien_SelectAll' reported the ErrorCode: " + m_iErrorCode);
				}

				return dtToReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("clsHUU_LenhSanXuat_DongBaoDongKien::SelectAll::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
				sdaAdapter.Dispose();
			}
		}


		#region Class Property Declarations
		public SqlInt32 iID_LenhSanXuat
		{
			get
			{
				return m_iID_LenhSanXuat;
			}
			set
			{
				SqlInt32 iID_LenhSanXuatTmp = (SqlInt32)value;
				if(iID_LenhSanXuatTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("iID_LenhSanXuat", "iID_LenhSanXuat can't be NULL");
				}
				m_iID_LenhSanXuat = value;
			}
		}


		public SqlString sMaLenhSanXuat
		{
			get
			{
				return m_sMaLenhSanXuat;
			}
			set
			{
				SqlString sMaLenhSanXuatTmp = (SqlString)value;
				if(sMaLenhSanXuatTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sMaLenhSanXuat", "sMaLenhSanXuat can't be NULL");
				}
				m_sMaLenhSanXuat = value;
			}
		}


		public SqlString sCaSanXuat
		{
			get
			{
				return m_sCaSanXuat;
			}
			set
			{
				SqlString sCaSanXuatTmp = (SqlString)value;
				if(sCaSanXuatTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sCaSanXuat", "sCaSanXuat can't be NULL");
				}
				m_sCaSanXuat = value;
			}
		}


		public SqlDateTime daNgayThangSanXuat
		{
			get
			{
				return m_daNgayThangSanXuat;
			}
			set
			{
				SqlDateTime daNgayThangSanXuatTmp = (SqlDateTime)value;
				if(daNgayThangSanXuatTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("daNgayThangSanXuat", "daNgayThangSanXuat can't be NULL");
				}
				m_daNgayThangSanXuat = value;
			}
		}


		public SqlInt32 iID_CongNhan
		{
			get
			{
				return m_iID_CongNhan;
			}
			set
			{
				SqlInt32 iID_CongNhanTmp = (SqlInt32)value;
				if(iID_CongNhanTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("iID_CongNhan", "iID_CongNhan can't be NULL");
				}
				m_iID_CongNhan = value;
			}
		}


		public SqlInt32 iID_CaTruong
		{
			get
			{
				return m_iID_CaTruong;
			}
			set
			{
				SqlInt32 iID_CaTruongTmp = (SqlInt32)value;
				if(iID_CaTruongTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("iID_CaTruong", "iID_CaTruong can't be NULL");
				}
				m_iID_CaTruong = value;
			}
		}


		public SqlInt32 iID_NguoiLap
		{
			get
			{
				return m_iID_NguoiLap;
			}
			set
			{
				SqlInt32 iID_NguoiLapTmp = (SqlInt32)value;
				if(iID_NguoiLapTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("iID_NguoiLap", "iID_NguoiLap can't be NULL");
				}
				m_iID_NguoiLap = value;
			}
		}


		public SqlInt32 iID_DinhMuc_Luong_SanLuong
		{
			get
			{
				return m_iID_DinhMuc_Luong_SanLuong;
			}
			set
			{
				SqlInt32 iID_DinhMuc_Luong_SanLuongTmp = (SqlInt32)value;
				if(iID_DinhMuc_Luong_SanLuongTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("iID_DinhMuc_Luong_SanLuong", "iID_DinhMuc_Luong_SanLuong can't be NULL");
				}
				m_iID_DinhMuc_Luong_SanLuong = value;
			}
		}


		public SqlInt32 iID_VTHH_ThanhPham
		{
			get
			{
				return m_iID_VTHH_ThanhPham;
			}
			set
			{
				SqlInt32 iID_VTHH_ThanhPhamTmp = (SqlInt32)value;
				if(iID_VTHH_ThanhPhamTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("iID_VTHH_ThanhPham", "iID_VTHH_ThanhPham can't be NULL");
				}
				m_iID_VTHH_ThanhPham = value;
			}
		}


		public SqlDouble fSoLuong_ThanhPham
		{
			get
			{
				return m_fSoLuong_ThanhPham;
			}
			set
			{
				SqlDouble fSoLuong_ThanhPhamTmp = (SqlDouble)value;
				if(fSoLuong_ThanhPhamTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("fSoLuong_ThanhPham", "fSoLuong_ThanhPham can't be NULL");
				}
				m_fSoLuong_ThanhPham = value;
			}
		}


		public SqlDouble fDonGia_ThanhPham
		{
			get
			{
				return m_fDonGia_ThanhPham;
			}
			set
			{
				SqlDouble fDonGia_ThanhPhamTmp = (SqlDouble)value;
				if(fDonGia_ThanhPhamTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("fDonGia_ThanhPham", "fDonGia_ThanhPham can't be NULL");
				}
				m_fDonGia_ThanhPham = value;
			}
		}


		public SqlDouble fThanhTien_ThanhPham
		{
			get
			{
				return m_fThanhTien_ThanhPham;
			}
			set
			{
				SqlDouble fThanhTien_ThanhPhamTmp = (SqlDouble)value;
				if(fThanhTien_ThanhPhamTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("fThanhTien_ThanhPham", "fThanhTien_ThanhPham can't be NULL");
				}
				m_fThanhTien_ThanhPham = value;
			}
		}


		public SqlBoolean bTrangThai_XuatKho_VatTuChinh
		{
			get
			{
				return m_bTrangThai_XuatKho_VatTuChinh;
			}
			set
			{
				SqlBoolean bTrangThai_XuatKho_VatTuChinhTmp = (SqlBoolean)value;
				if(bTrangThai_XuatKho_VatTuChinhTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("bTrangThai_XuatKho_VatTuChinh", "bTrangThai_XuatKho_VatTuChinh can't be NULL");
				}
				m_bTrangThai_XuatKho_VatTuChinh = value;
			}
		}


		public SqlBoolean bTrangThai_XuatKho_VatTuPhu
		{
			get
			{
				return m_bTrangThai_XuatKho_VatTuPhu;
			}
			set
			{
				SqlBoolean bTrangThai_XuatKho_VatTuPhuTmp = (SqlBoolean)value;
				if(bTrangThai_XuatKho_VatTuPhuTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("bTrangThai_XuatKho_VatTuPhu", "bTrangThai_XuatKho_VatTuPhu can't be NULL");
				}
				m_bTrangThai_XuatKho_VatTuPhu = value;
			}
		}


		public SqlBoolean bTrangThai_NhapKho_ThanhPham
		{
			get
			{
				return m_bTrangThai_NhapKho_ThanhPham;
			}
			set
			{
				SqlBoolean bTrangThai_NhapKho_ThanhPhamTmp = (SqlBoolean)value;
				if(bTrangThai_NhapKho_ThanhPhamTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("bTrangThai_NhapKho_ThanhPham", "bTrangThai_NhapKho_ThanhPham can't be NULL");
				}
				m_bTrangThai_NhapKho_ThanhPham = value;
			}
		}


		public SqlDouble fPhePham
		{
			get
			{
				return m_fPhePham;
			}
			set
			{
				SqlDouble fPhePhamTmp = (SqlDouble)value;
				if(fPhePhamTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("fPhePham", "fPhePham can't be NULL");
				}
				m_fPhePham = value;
			}
		}


		public SqlString sGhiChu
		{
			get
			{
				return m_sGhiChu;
			}
			set
			{
				SqlString sGhiChuTmp = (SqlString)value;
				if(sGhiChuTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sGhiChu", "sGhiChu can't be NULL");
				}
				m_sGhiChu = value;
			}
		}


		public SqlBoolean bGuiDuLieu
		{
			get
			{
				return m_bGuiDuLieu;
			}
			set
			{
				SqlBoolean bGuiDuLieuTmp = (SqlBoolean)value;
				if(bGuiDuLieuTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("bGuiDuLieu", "bGuiDuLieu can't be NULL");
				}
				m_bGuiDuLieu = value;
			}
		}


		public SqlBoolean bTonTai
		{
			get
			{
				return m_bTonTai;
			}
			set
			{
				SqlBoolean bTonTaiTmp = (SqlBoolean)value;
				if(bTonTaiTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("bTonTai", "bTonTai can't be NULL");
				}
				m_bTonTai = value;
			}
		}


		public SqlBoolean bNgungTheoDoi
		{
			get
			{
				return m_bNgungTheoDoi;
			}
			set
			{
				SqlBoolean bNgungTheoDoiTmp = (SqlBoolean)value;
				if(bNgungTheoDoiTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("bNgungTheoDoi", "bNgungTheoDoi can't be NULL");
				}
				m_bNgungTheoDoi = value;
			}
		}


		public SqlBoolean bCheck_DongBao
		{
			get
			{
				return m_bCheck_DongBao;
			}
			set
			{
				SqlBoolean bCheck_DongBaoTmp = (SqlBoolean)value;
				if(bCheck_DongBaoTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("bCheck_DongBao", "bCheck_DongBao can't be NULL");
				}
				m_bCheck_DongBao = value;
			}
		}
		#endregion
	}
}
